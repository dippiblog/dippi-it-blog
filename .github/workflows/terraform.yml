name: Terraform Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch: 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.4.0'

      # Step 4: Change to the directory where your Terraform files are located
      - name: Change to Terraform directory
        run: cd terraform/

      # Step 5: Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: terraform/

      # Step 6: Terraform Plan
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan
          # Capture specific output value you're interested in
          PUBLIC_IP=$(terraform output -raw instance_public_ip)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV  # Set as environment variable for future steps
        working-directory: terraform/

      # Step 7: Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/

      # Step 8: Save the state (If you need to pass values across jobs or steps)
      - name: Save state (to use in other steps)
        run: echo "PUBLIC_IP=${{ steps.plan.outputs.PUBLIC_IP }}" >> $GITHUB_STATE

      # Step 9: Clean up Terraform resources (Destroy)
      - name: Terraform Destroy (Clean Up)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: terraform destroy -auto-approve
        working-directory: terraform/
